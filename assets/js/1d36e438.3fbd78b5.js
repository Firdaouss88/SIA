"use strict";(self.webpackChunksia_doc=self.webpackChunksia_doc||[]).push([[7690],{3905:function(e,t,n){n.d(t,{Zo:function(){return c},kt:function(){return d}});var a=n(67294);function o(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function l(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function r(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?l(Object(n),!0).forEach((function(t){o(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):l(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function u(e,t){if(null==e)return{};var n,a,o=function(e,t){if(null==e)return{};var n,a,o={},l=Object.keys(e);for(a=0;a<l.length;a++)n=l[a],t.indexOf(n)>=0||(o[n]=e[n]);return o}(e,t);if(Object.getOwnPropertySymbols){var l=Object.getOwnPropertySymbols(e);for(a=0;a<l.length;a++)n=l[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(o[n]=e[n])}return o}var i=a.createContext({}),s=function(e){var t=a.useContext(i),n=t;return e&&(n="function"==typeof e?e(t):r(r({},t),e)),n},c=function(e){var t=s(e.components);return a.createElement(i.Provider,{value:t},e.children)},p={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},m=a.forwardRef((function(e,t){var n=e.components,o=e.mdxType,l=e.originalType,i=e.parentName,c=u(e,["components","mdxType","originalType","parentName"]),m=s(n),d=o,f=m["".concat(i,".").concat(d)]||m[d]||p[d]||l;return n?a.createElement(f,r(r({ref:t},c),{},{components:n})):a.createElement(f,r({ref:t},c))}));function d(e,t){var n=arguments,o=t&&t.mdxType;if("string"==typeof e||o){var l=n.length,r=new Array(l);r[0]=m;var u={};for(var i in t)hasOwnProperty.call(t,i)&&(u[i]=t[i]);u.originalType=e,u.mdxType="string"==typeof e?e:o,r[1]=u;for(var s=2;s<l;s++)r[s]=n[s];return a.createElement.apply(null,r)}return a.createElement.apply(null,n)}m.displayName="MDXCreateElement"},26859:function(e,t,n){n.r(t),n.d(t,{assets:function(){return c},contentTitle:function(){return i},default:function(){return d},frontMatter:function(){return u},metadata:function(){return s},toc:function(){return p}});var a=n(87462),o=n(63366),l=(n(67294),n(3905)),r=["components"],u={},i=void 0,s={unversionedId:"Formation PBI/801300/Format_Dax_DA-Fonction-CALCULATE",id:"Formation PBI/801300/Format_Dax_DA-Fonction-CALCULATE",title:"Format_Dax_DA-Fonction-CALCULATE",description:"Introduction",source:"@site/docs/80-Formation PBI/801300/801300_Format_Dax_DA-Fonction-CALCULATE.md",sourceDirName:"80-Formation PBI/801300",slug:"/Formation PBI/801300/Format_Dax_DA-Fonction-CALCULATE",permalink:"/docs/Formation PBI/801300/Format_Dax_DA-Fonction-CALCULATE",editUrl:"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/80-Formation PBI/801300/801300_Format_Dax_DA-Fonction-CALCULATE.md",tags:[],version:"current",sidebarPosition:801300,frontMatter:{},sidebar:"tutorialSidebar",previous:{title:"Format_Dax_DA-Evaluation-contextes",permalink:"/docs/Formation PBI/801300/Format_Dax_DA-Evaluation-contextes"},next:{title:"Format_Dax_DA-Fonctions-de-table",permalink:"/docs/Formation PBI/801300/Format_Dax_DA-Fonctions-de-table"}},c={},p=[{value:"Introduction",id:"introduction",level:2},{value:"Exemples CALCULATE",id:"exemples-calculate",level:2},{value:"Les op\xe9rateurs internes pour le contexte du filtre",id:"les-op\xe9rateurs-internes-pour-le-contexte-du-filtre",level:2},{value:"Utiliser une seule colonne dans la syntaxe compacte",id:"utiliser-une-seule-colonne-dans-la-syntaxe-compacte",level:2}],m={toc:p};function d(e){var t=e.components,n=(0,o.Z)(e,r);return(0,l.kt)("wrapper",(0,a.Z)({},m,n,{components:t,mdxType:"MDXLayout"}),(0,l.kt)("h1",{id:"fonction-calculate"},"Fonction CALCULATE"),(0,l.kt)("h2",{id:"introduction"},"Introduction"),(0,l.kt)("p",null,"CALCULATE est de loin la fonction la plus importante, la plus utile et la plus complexe du langage DAX. La fonction elle-m\xeame est simple. Il n'ex\xe9cute que quelques t\xe2ches, mais le nombre de sc\xe9narios o\xf9 CALCULATE est n\xe9cessaire, ainsi que la complexit\xe9 des formules qui peuvent \xeatre \xe9crites avec CALCULATE, obligent \xe0 lui consacrer un document complet."),(0,l.kt)("p",null,"\xc0 l'aide de CALCULATE, vous pouvez modifier le contexte de filtre qui \xe9value une expression DAX. Vous pouvez modifier les filtres au niveau de la granularit\xe9 de la colonne et vous pouvez remplacer ou combiner des filtres existants avec de nouveaux filtres."),(0,l.kt)("p",null,"Vous pourrez appliquer les m\xeames concepts \xe0 CALCULATETABLE, qui ressemble \xe0 CALCULATE mais renvoie une table au lieu d'une valeur unique."),(0,l.kt)("h2",{id:"exemples-calculate"},"Exemples CALCULATE"),(0,l.kt)("p",null,"La fonction CALCULATE peut manipuler le contexte du filtre en ajoutant ou \xe9liminant le filtre, on commence par l'exemple  CALCULATE avec ALL :"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-sql"},"SalesAllColors = \n        CALCULATE (\n                        [Sales Amount],\n                        ALL ( Product[ Color])\n)\n")),(0,l.kt)("p",null,"ALL est un modificateur de filtre, lorsqu'elle est utilis\xe9e avec la fonction CALCULATE comme fonction unique, elle va supprimer le filtre appliqu\xe9 sur ",(0,l.kt)("em",{parentName:"p"},"Product ","[Color]")," s'il y'en a.\nDonc on va avoir comme r\xe9sultat le montant des ventes pas tout couleur de produit , malgr\xe9 s'il existait un filtre sur la colonne ",(0,l.kt)("em",{parentName:"p"},"couleur"),"."),(0,l.kt)("p",null,"Nous avons aussi des combinaisons compos\xe9 \xe0 base de la fonction  ",(0,l.kt)("strong",{parentName:"p"},"CALCULATE")," et la fonction ",(0,l.kt)("strong",{parentName:"p"},"KEEPFILTERS"),", cette derni\xe8re fonctionne uniquement en tant qu'argument filtre de la fonction CALCULATE:"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-sql"},'SalesTrendyColors = \n        CALCULATE (\n                        [Sales Amount],\n                        KEEPFILTERS ( Product[ Color] in { "Red" , \'\'Blue"})\n)\n')),(0,l.kt)("h2",{id:"les-op\xe9rateurs-internes-pour-le-contexte-du-filtre"},"Les op\xe9rateurs internes pour le contexte du filtre"),(0,l.kt)("p",null,"La fonction CALCULATE peut modifier le contexte de filtre de diff\xe9rentes mani\xe8res, lorsque vous rajouter la fonction ALL, vous supprimez tout filtre existant sur la colonne ou la table pass\xe9e en argument. En utilisant la fonction KEEPFILTERS vous ajoutez un nouveau filtre dans le contexte du filtre sans enlever les filtres existants en avant.\nLes op\xe9rations appel\xe9es interne sont celles qu'on applique en interne du contexte de filtre et qu'on peut les utiliser avec la fonction CALCULATE, comme la fonction INTERSECT, REMOVEFILTERS, ADDFILTER , OVERWRITE."),(0,l.kt)("h2",{id:"utiliser-une-seule-colonne-dans-la-syntaxe-compacte"},"Utiliser une seule colonne dans la syntaxe compacte"),(0,l.kt)("p",null,"Commen\xe7ons par le code suivant :"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-sql"},"BigSales = \n        CALCULATE (\n                        [Sales Amount],\n                        FILTER (\n                                Sales,\n                                Sales[Quantity] * Sales [Net Price] > 1000\n\n)\n")),(0,l.kt)("p",null,"Dans ce cas la fonction FILTER va retourner une table qui va contenir la liste des combinaisons uniques de la quantit\xe9 multipli\xe9 par le prix net soit sup\xe9rieur \xe0 1000 pour toute la table Sales."),(0,l.kt)("p",null,"Vous pouvez optimiser plus votre mesure par le fait de garder que les colonnes essentielles pour vos calculs,en utilisant par exemple la fonction ALL avec les deux colonnes quantit\xe9 et prix net :"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-sql"},"BigSales 2 = \n        CALCULATE (\n                        [Sales Amount],\n                        FILTER (\n                                ALL ( Sales[Quantity],Sales [Net Price])\n                                Sales[Quantity] * Sales [Net Price] > 1000\n)\n")),(0,l.kt)("p",null,"Le r\xe9sultat de la fonction ALL est une table avec deux colonnes et ne contient plus toutes les colonnes de la table ventes, donc vous obtenez une table avec moins de lignes parce que la s\xe9lection est unique des colonnes quantit\xe9 et prix net de la tables des ventes, mais la diff\xe9rence ici que ALL \xe9limine tout filtre appliqu\xe9 sur la table ventes.\nDonc on filtre sur les deux colonnes sans aucun filtre sur leur table source et avec la s\xe9lection unique des champs( pas de doublon)."),(0,l.kt)("p",null,"Aussi une autre remarque , il ne faut pas utiliser l'agr\xe9gation  dans une syntaxe compacte comme suit:"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-sql"},"CALCULATE (\n                        [Sales Amount],\n                        Sales[Quantity] < SUM (Sales [Quantity] ) / 100\n)\n")),(0,l.kt)("p",null,"Ce calcul va essayer de filtrer uniquement les transactions o\xf9 la quantit\xe9 est moins d'un pourcent de la somme de la quantit\xe9 de toute la table des ventes, alors qu'il est d\xe9conseill\xe9 d'inclure l'agr\xe9gation dance ce contexte."),(0,l.kt)("p",null,"Ce qui est efficace est de d\xe9placer l'\xe9valuation de l'agr\xe9gation avant le calcul dans une variable o\xf9 vous allez enregistrer la valeur calcul\xe9e et apr\xe8s utiliser cette variable dans vos filtres:"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-sql"},"VAR TotalQuantity =  SUM (Sales [Quantity] )\nRETURN\nCALCULATE (\n                        [Sales Amount],\n                        Sales[Quantity] < TotalQuantity  / 100\n)\n")),(0,l.kt)("blockquote",null,(0,l.kt)("p",{parentName:"blockquote"},"Cela rend le code plus facile \xe0 lire et plus facile \xe0 ex\xe9cuter.")))}d.isMDXComponent=!0}}]);